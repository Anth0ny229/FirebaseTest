{"Name":"Xamarin.Social","Id":1492,"Alias":"xamarin.social","Description":"Xamarin.Social posts statuses, links, images, and other media to social networks using\r\na simple, cross-platform API. With Xamarin.Social, you can easily:\r\n\r\n 1. Share text and images on social networks.\r\n 2. Access social network APIs using authenticated requests.\r\n 3. Automatically and securely store user credentials using Xamarin.Auth.\r\n\r\nXamarin.Social currently works with these social networks, and can be extended to support\r\ncustom services:\r\n\r\n * [App.net](http://alpha.app.net)\r\n * [Facebook](http://facebook.com)\r\n * [Flickr](http://www.flickr.com)\r\n * [Twitter](http://twitter.com)\r\n\r\nAn example for sharing a link with Facebook on iOS:\r\n\r\n```csharp\r\nusing Xamarin.Social;\r\nusing Xamarin.Social.Services;\r\n...\r\n\r\npublic override void ViewDidAppear (bool animated)\r\n{\r\n\tbase.ViewDidAppear (animated);\r\n\r\n\t// 1. Create the service\r\n\tvar facebook = new FacebookService {\r\n\t\tClientId = \"\u003cApp ID from developers.facebook.com/apps\u003e\",\r\n\t\tRedirectUrl = new System.Uri (\"\u003cRedirect URL from developers.facebook.com/apps\u003e\")\r\n\t};\r\n\r\n\t// 2. Create an item to share\r\n\tvar item = new Item { Text = \"Xamarin.Social is the bomb.com.\" };\r\n\titem.Links.Add (new Uri (\"http://github.com/xamarin/xamarin.social\"));\r\n\r\n\t// 3. Present the UI on iOS\r\n\tvar shareController = facebook.GetShareUI (item, result =\u003e {\r\n\t\t// result lets you know if the user shared the item or canceled\r\n\t\tDismissViewController (true, null);\r\n\t});\r\n\tPresentViewController (shareController, true, null);\r\n}\r\n```\r\n\r\n*Some screenshots assembled with [PlaceIt](http://placeit.breezi.com/).*\r\n","Version":"1.1.7","Summary":"Share statuses, links, and images on Facebook, Flickr, Twitter and more.","QuickStart":"## Sharing\r\n\r\nWe\u0027ll demonstrate sharing using Facebook. In order to share with Facebook, you\u0027ll need to have created\r\na Facebook app at https://developers.facebook.com/apps. Use the \"Website with Facebook Login\" integration\r\nand ensure you\u0027ve added `publish_stream` in the \"Extended Permissions\" section.\r\n\r\nTo share an item, first create the service, create the item and then present the share UI:\r\n\r\n\t\r\n\tusing Xamarin.Social;\r\n\tusing Xamarin.Social.Services;\r\n\t...\r\n\t\r\n\tpublic override void ViewDidAppear (bool animated)\r\n\t{\r\n\t\tbase.ViewDidAppear (animated);\r\n\t\r\n\t\t// 1. Create the service\r\n\t\tvar facebook = new FacebookService {\r\n\t\t\tClientId = \"\u003cApp ID from developers.facebook.com/apps\u003e\",\r\n\t\t\tRedirectUrl = new System.Uri (\"\u003cRedirect URL from developers.facebook.com/apps\u003e\")\r\n\t\t};\r\n\t\r\n\t\t// 2. Create an item to share\r\n\t\tvar item = new Item { Text = \"Xamarin.Social is the bomb.com.\" };\r\n\t\titem.Links.Add (new Uri (\"http://github.com/xamarin/xamarin.social\"));\r\n\t\r\n\t\t// 3. Present the UI on iOS\r\n\t\tvar shareController = facebook.GetShareUI (item, result =\u003e {\r\n\t\t\t// result lets you know if the user shared the item or canceled\r\n\t\t\tDismissViewController (true, null);\r\n\t\t});\r\n\t\tPresentViewController (shareController, true, null);\r\n\t}\r\n\r\nIf you\u0027re on Android, then you should present the share UI using an intent:\r\n\r\n\r\n\tprotected override void OnCreate (Bundle bundle)\r\n\t{\r\n\t\tbase.OnCreate (bundle);\r\n\t\r\n\t\t// 1. Create the service\r\n\t\tvar facebook = new FacebookService { ClientId = \"\u003cApp ID from developers.facebook.com/apps\u003e\" };\r\n\t\r\n\t\t// 2. Create an item to share\r\n\t\tvar item = new Item { Text = \"Xamarin.Social is the bomb.com.\" };\r\n\t\titem.Links.Add (new Uri (\"http://github.com/xamarin/xamarin.social\"));\r\n\t\r\n\t\t// 3. Present the UI on Android\r\n\t\tvar shareIntent = facebook.GetShareUI (this, item, result =\u003e {\r\n\t\t\t// result lets you know if the user shared the item or canceled\r\n\t\t});\r\n\t\tStartActivityForResult (shareIntent, 42);\r\n\t}\r\n\r\n\r\n## Services\r\n\r\nXamarin.Social comes with a variety of services that you can use to\r\nshare items, and can be created with the following credentials:\r\n\r\n* [App.net](https://alpha.app.net/developer/apps/) `new AppDotNetService { ClientId }`\r\n* [Facebook](http://developers.facebook.com) `new FacebookService { ClientId }`\r\n* [Flickr](http://www.flickr.com/services/api/) `new FlickrService { ConsumerKey, ConsumerSecret }`\r\n* [Twitter](http://dev.twitter.com) `new TwitterService { ConsumerKey, ConsumerSecret }`\r\n* [Twitter](http://dev.twitter.com)* `new Twitter5Service ()`\r\n\r\n\\* `Twitter5Service` uses iOS 5-specific UI and account settings.\r\n\r\n## Share Items\r\n\r\nTo share some text, links, or images, create an `Item` object and call\r\n`GetShareUI`. The share UI allows the user to select the account that\r\nthey want to use, and allows the user to edit the item\u0027s text before it\r\nis posted.\r\n\r\nItems have properties for Text, Images, Files, and Links; however, not\r\nall services support sharing all of these types of media. Use these\r\n`Service` properties to query the limitations of different services:\r\n\r\n* `MaxTextLength`\r\n* `MaxLinks`\r\n* `MaxImages`\r\n* `MaxFiles`\r\n\r\nAs an alternative to presenting the share UI, you can share items\r\ndirectly using the `ShareItemAsync` method of the service.\r\n\r\n## Social APIs\r\n\r\nIf you want to do more than basic sharing, you can access arbitrary\r\nservice APIs using `CreateRequest`:\r\n\r\n```csharp\r\nvar request = facebook.CreateRequest (\"GET\", new Uri (\"https://graph.facebook.com/me/feed\"), account);\r\nrequest.GetResponseAsync ().ContinueWith (response =\u003e {\r\n\t// parse the JSON in response.GetResponseText ()\r\n});\r\n```\r\n\r\nThe service will automatically authenticate the request for you.\r\n\r\n## Authentication\r\n\r\nXamarin.Social uses the Xamarin.Auth library to fetch and store `Account` objects. \r\n\r\nEach service exposes a `GetAuthenticateUI` method that returns a\r\n`Xamarin.Auth.Authenticator` object that you can use to authenticate the\r\nuser. Doing so will automatically store the authenticated account so\r\nthat it can be used later.\r\n\r\nYou can retrieve stored accounts with `GetAccountsAsync`:\r\n\r\n```csharp\r\nfacebook.GetAccountsAsync ().ContinueWith (accounts =\u003e {\r\n\t// accounts is an IEnumerable\u003cAccount\u003e of saved accounts\r\n});\r\n```\r\n","Hash":"1e8c6b9f3c7534a1a331a995fb974bf0","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}